       The dup() system call creates a copy of the file descriptor oldfd,
       using the lowest-numbered unused file descriptor for the new
       descriptor.

       After a successful return, the old and new file descriptors may be
       used interchangeably.  They refer to the same open file description
       (see open(2)) and thus share file offset and file status flags; for
       example, if the file offset is modified by using lseek(2) on one of
       the file descriptors, the offset is also changed for the other.

       The two file descriptors do not share file descriptor flags (the
       close-on-exec flag).  The close-on-exec flag (FD_CLOEXEC; see
       fcntl(2)) for the duplicate descriptor is off.

   dup2()
       The dup2() system call performs the same task as dup(), but instead
       of using the lowest-numbered unused file descriptor, it uses the file
       descriptor number specified in newfd.  If the file descriptor newfd
       was previously open, it is silently closed before being reused.

       The steps of closing and reusing the file descriptor newfd are
       performed atomically.  This is important, because trying to implement
       equivalent functionality using close(2) and dup() would be subject to
       race conditions, whereby newfd might be reused between the two steps.
       Such reuse could happen because the main program is interrupted by a
       signal handler that allocates a file descriptor, or because a
       parallel thread allocates a file descriptor.

       Note the following points:

       *  If oldfd is not a valid file descriptor, then the call fails, and
          newfd is not closed.

       *  If oldfd is a valid file descriptor, and newfd has the same value
          as oldfd, then dup2() does nothing, and returns newfd.

   dup3()
       dup3() is the same as dup2(), except that:

       *  The caller can force the close-on-exec flag to be set for the new
          file descriptor by specifying O_CLOEXEC in flags.  See the
          description of the same flag in open(2) for reasons why this may
          be useful.

       *  If oldfd equals newfd, then dup3() fails with the error EINVAL.
RETURN VALUE         top
       On success, these system calls return the new file descriptor.  On
       error, -1 is returned, and errno is set appropriately.

